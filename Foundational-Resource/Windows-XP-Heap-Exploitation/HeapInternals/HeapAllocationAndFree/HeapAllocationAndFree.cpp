// HeapAllocationAndFree.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <windows.h>
#include <stdio.h>
#include <conio.h>
#include <string>
#include <iostream>

int _tmain(int argc, _TCHAR* argv[])
{
	std::string stringInput;

	std::cout << "DEBUG START\n";
    std::getline(std::cin, stringInput);

	int val = 16;
	int va2 = 24;

	HLOCAL pAlloc1=NULL;
    HLOCAL pAlloc2=NULL;
	HLOCAL pAlloc3=NULL;
	HLOCAL pAlloc4=NULL;
	HLOCAL pAlloc5=NULL;

	HLOCAL pAlloc11=NULL;
    HLOCAL pAlloc21=NULL;
	HLOCAL pAlloc31=NULL;
	HLOCAL pAlloc41=NULL;
	HLOCAL pAlloc51=NULL;

    HANDLE hProcessHeap=GetProcessHeap();
	printf("ProcessHeap Allocated at: %x\n", hProcessHeap);
	std::cout << "DEBUG HEAP INIT\n";
    std::getline(std::cin, stringInput);

    pAlloc1=HeapAlloc(hProcessHeap, 0, val);
	printf("Heap 1 Allocated at: %x\n", pAlloc1);
	std::cout << "DEBUG ALLOC 1\n";
    std::getline(std::cin, stringInput);

	pAlloc2=HeapAlloc(hProcessHeap, 0, val);
	printf("Heap 2 Allocated at: %x\n", pAlloc2);
	std::cout << "DEBUG ALLOC 2\n";
    std::getline(std::cin, stringInput);

	pAlloc3=HeapAlloc(hProcessHeap, 0, val);
	printf("Heap 3 Allocated at: %x\n", pAlloc3);
	std::cout << "DEBUG ALLOC 3\n";
    std::getline(std::cin, stringInput);

	pAlloc4=HeapAlloc(hProcessHeap, 0, val);
	printf("Heap 4 Allocated at: %x\n", pAlloc4);
	std::cout << "DEBUG ALLOC 4\n";
    std::getline(std::cin, stringInput);

	pAlloc5=HeapAlloc(hProcessHeap, 0, val);
	printf("Heap 5 Allocated at: %x\n", pAlloc5);
	std::cout << "DEBUG ALLOC 5\n";
    std::getline(std::cin, stringInput);

    pAlloc11=HeapAlloc(hProcessHeap, 0, va2);
	printf("Heap 11 Allocated at: %x\n", pAlloc11);
	std::cout << "DEBUG ALLOC 1\n";
    std::getline(std::cin, stringInput);

	pAlloc21=HeapAlloc(hProcessHeap, 0, va2);
	printf("Heap 21 Allocated at: %x\n", pAlloc21);
	std::cout << "DEBUG ALLOC 2\n";
    std::getline(std::cin, stringInput);

	pAlloc31=HeapAlloc(hProcessHeap, 0, va2);
	printf("Heap 31 Allocated at: %x\n", pAlloc31);
	std::cout << "DEBUG ALLOC 3\n";
    std::getline(std::cin, stringInput);

	pAlloc41=HeapAlloc(hProcessHeap, 0, va2);
	printf("Heap 41 Allocated at: %x\n", pAlloc41);
	std::cout << "DEBUG ALLOC 4\n";
    std::getline(std::cin, stringInput);

	pAlloc51=HeapAlloc(hProcessHeap, 0, va2);
	printf("Heap 51 Allocated at: %x\n", pAlloc51);
	std::cout << "DEBUG ALLOC 5\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc1);
	std::cout << "HEAP FREE\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc2);
	std::cout << "HEAP FREE\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc3);
	std::cout << "HEAP FREE\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc4);
	std::cout << "HEAP FREE\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc5);
	std::cout << "HEAP FREE\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc11);
	std::cout << "HEAP FREE\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc21);
	std::cout << "HEAP FREE\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc31);
	std::cout << "HEAP FREE\n";
    std::getline(std::cin, stringInput);
	
	HeapFree(hProcessHeap, 0, pAlloc41);
	std::cout << "HEAP FREE\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc51);
	std::cout << "HEAP FREE\n";
    std::getline(std::cin, stringInput);
    //
    // Use allocated memory
    //

	memcpy(pAlloc1, "AAAA", 4);
	std::cout << "DEBUG USE 1\n";
    std::getline(std::cin, stringInput);

	memcpy(pAlloc2, "BBBBBBBB", 8);
	std::cout << "DEBUG USE 2\n";
    std::getline(std::cin, stringInput);

    HeapFree(hProcessHeap, 0, pAlloc1);
	std::cout << "DEBUG FREE 1\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc11);
	std::cout << "DEBUG FREE 1.1\n";
    std::getline(std::cin, stringInput);

    HeapFree(hProcessHeap, 0, pAlloc2);
	std::cout << "DEBUG FREE 2\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc3);
	std::cout << "DEBUG FREE 3\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc4);
	std::cout << "DEBUG FREE 4\n";
    std::getline(std::cin, stringInput);

	HeapFree(hProcessHeap, 0, pAlloc5);
	std::cout << "DEBUG FREE 5\n";
    std::getline(std::cin, stringInput);

	return 0;
}

