// HeapOverflowsFreeList0InsertAttack.cpp : Defines the entry point for the console application.
//
#define _CRT_SECURE_NO_WARNINGS

#include "stdafx.h"
#include <stdio.h>
#include <windows.h>
int main(int argc,char *argv[])
{
    HLOCAL a,b,c,x,y,z;
    HANDLE hHeap;
 
    hHeap = HeapCreate(0x00040000,0,0);
	printf("Heap Address at: %x\n", hHeap);
    a = HeapAlloc(hHeap,HEAP_ZERO_MEMORY,1200);
    b = HeapAlloc(hHeap,HEAP_ZERO_MEMORY,1024);
    c = HeapAlloc(hHeap,HEAP_ZERO_MEMORY,2048);

	char bufA[10000];
	gets(bufA);
    // freelist[0] has 'c' chunk
	printf("(+) Chunk a: 0x%08x Chunk b: 0x%08x Chunk c: 0x%08x\n",a,b,c);
    HeapFree(hHeap, 0, c);
 	__asm {
		int 0x3
	}

    // overwrite b so that we spill into c
    // set c's blink to lookaside[3]
 
    printf("(+) Fill chunk b (using 1024 bytes), overflowing chunk c:\n");
 
    // overflow b
    // using 1024 A's + BBBBCCCCDDDDEEEE (E=blink) (D=Flink)
    // overflow with blink set to 0x00480718 (lookaside[3])
 
	char bufB[10000];
	gets(bufB);
	memcpy(b, bufB, strlen(bufB));
    //gets(b);
 
    // free 'a' so that freelist[0] looks like this:
    // freelist[0]:
    //             chunk b
    //             chunk a
    //             chunk c
 
    // the 'insert'
	__asm {
		int 0x3
	}
    HeapFree(hHeap, 0, a);
 
    // now lookaside[3] should be
    // lookaside[3]:
    //              chunk b
    //              chunk a
    //                    chunk ?        (fake chunk created from the overwrite)
    //              flink we control from overwrite
 
    // pop off the lookaside until we reach
    // our fake chunk
 
	__asm {
		int 0x3
	}
    x = HeapAlloc(hHeap,HEAP_ZERO_MEMORY,0x10);
    y = HeapAlloc(hHeap,HEAP_ZERO_MEMORY,0x10);
    z = HeapAlloc(hHeap,HEAP_ZERO_MEMORY,0x10);
 
    // write shellcode at controlled freelist flink (lookaside fake chunk)
	gets(bufB);
	memcpy(z, bufB, strlen(bufB));
	//gets(z);
    exit(0);
}

